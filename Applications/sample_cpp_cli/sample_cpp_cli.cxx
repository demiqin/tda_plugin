/*=========================================================================
 *
 *  Copyright Kitware Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

// This header file <filename>CLP.h is auto-generated by cmake and contains
// the PARSE_ARGS macro that sets up command-line usage help and also parse
// command-line arguments
#include "sample_cpp_cliCLP.h"

template < class T >
void printVectorParameter(const std::string &name, std::vector< T > &vec)
{
  std::cout << name << " = ";

  for(int i = 0; i < vec.size(); i++)
    {
    if( i > 0 )
      {
      std::cout << ", ";
      }
    else
      {
      std::cout << vec[i];
      }
    }

  std::cout << std::endl;
}

int main(int argc, char * argv[])
{
  // sets up help for command-line usage and parses command-line arguments
  PARSE_ARGS;

  // scalar parameters
  std::cout << "Integer Parameter = " << integerVariable << std::endl;
  std::cout << "Double Parameter = " << doubleVariable << std::endl;

  // vector parameters
  printVectorParameter< float >("Float Vector Parameter", floatVector);
  printVectorParameter< std::string >("String Vector Parameter", stringVector);

  // enumeration parameters
  std::cout << "String Enumeration Parameter = " << stringChoice << std::endl;

  // boolean parameters
  std::cout << "Boolean 1 = " << boolean1 << std::endl;
  std::cout << "Boolean 2 = " << boolean2 << std::endl;
  std::cout << "Boolean 3 = " << boolean3 << std::endl;

  // file, directory, and image parameters
  std::cout << "Input file = " << file1 << std::endl;
  printVectorParameter< std::string >("Input Files", files);

  std::cout << "Input Directory = " << directory1 << std::endl;

  std::cout << "Input Image = " << image1 << std::endl;
  std::cout << "Output Image = " << image2 << std::endl;

  // Indexed parameters
  std::cout << "First index argument = " << arg0 << std::endl;
  std::cout << "Second index argument = " << arg1 << std::endl;

  // Write out the return parameters in "name = value" form
  if( !returnParameterFile.empty() )
    {
    std::ofstream rts;
    rts.open(returnParameterFile.c_str() );
    rts << "anintegerreturn =  10" << std::endl;
    rts << "abooleanreturn = true" << std::endl;
    rts << "afloatreturn = 34.2" << std::endl;
    rts << "adoublereturn = 102.7" << std::endl;
    rts << "astringreturn = Good-bye" << std::endl;
    rts << "anintegervectorreturn = 4,5,6,7" << std::endl;
    rts << "astringchoicereturn = Ron" << std::endl;
    rts.close();
    }

  return EXIT_SUCCESS;
}
